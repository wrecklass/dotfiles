[core]
	editor = /Users/smartin/bin/vim
[push]
	default = simple
[credential]
	helper = store
[alias]
  # XXX TEMPLATE: XXX
  # changeme = "!f() { changemetoo }; f"

  la = "!git config -l | grep alias "
	rv = remote -v
	r = remote -v
  # Add a new remote to the current repository, $1=NameIt, $2=URL
  ra = "!f() { git remote add $1 $2; }; f"

  # some log aliases
  history = log
  h = !git log | cat
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
  # Added dates:
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  # Pretty simple
  le = log --oneline --decorate
  # Show history of file or files
  filelog = log -u
  fl = log -u
  # Inspect recent history
  dl = !git ll -1
  dlc = diff --cached HEAD^
  # Find a file path in codebase:
  f = "!git ls-files | grep -i"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find branches containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commit by commit message/comment
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad %Creset%s%Cgreen [%cn] %Cred%d' --decorate --date=short --grep=\"$1\"; };f"
  
  # Search for a file containing a string
  gr = grep -Ii
  gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; } ; f"
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # Show the diff between the "number" of revisions ago and current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Diff to a specific commit passed as parameter
  dr = "!f() { git diff "$1"^.."$1"; }; f"
  diffr = "!f() { git diff "$1"^.."$1"; }; f"
  lc = "!f() { git ll "$1"^.."$1"; }; f"

  # Pull in all of the remote changes including submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Start new work
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive
  # Prepare to work on a new branch:
  cob = checkout -b
  # Go to a branch, creating if necessary:
  go ="!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  # Because I forget that git isn't SVN
  info = status
  # Edit the global config file
  # e = config --global -e
	edit = !vim ~/.gitconfig
  e = !vim ~/.gitconfig
  # Saves Work in Progress. Leaves untracked alone.
  wip = commit -am "WIP"
  # Just show the date in compressed format
  dt  = !date +"%Y%m%dT%H%M%S"
  # Longer format
  dtl = !date '+"%Y/%m/%d %H:%M:%S"'
  # seconds since epoch
  dts = !date +'%s'

  # Note that this adds UNTRACKED files to the repository:
  cm = !git add -A && git commit -m
  # Likewise, saves it all as a (probably temporary) checkpoint:
  save = !git add -A && git commit -m 'SAVEPOINT'
  # Then use this to restore (roll back) the previous working session.
  undo = reset HEAD~1 --mixed
  # Add changes and a new note to the already commited HEAD
  amend = commit -a --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() {git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Proper way to do a reset, leave stuff in repository for safety
  # It is saved to a commit that will be hard to restore, but is available
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

  # Clean up branches
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
  # Better for me I think:
  brm = "!f() { if [ ! -z \"$1\" ]; then git branch -d $1 ; else echo No branch named ; fi; }; f"

  # Clean up and start some new work
  bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
  # Rename 'branch' to 'done-branch'
  done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

  # Mark a file to make git assume it is unchanged (don't commit it)
  assume = update-index --assume-unchanged
  # Change a file back to being managed by git:
  unassume = update-index --no-assume-unchanged
  # Show assumed files:
  assumed = "!git ls-flies -v | grep "^h" | cut -c 3-"
  # Unassume all assumed files:
  unassumeall = "!git assumed | xargs git unassume"
  # And assume all, good for starting up in a repository managed by something
  # else like SVN
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

  # TAGGING
  # Show the last tag created:
  lasttag = describe --tags --abbrev=0
  lt = describe --tags --abbrev=0

  # Show verbose output of tags and branches and remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v


  # Merge aliases
  # Checkout commits I've made
  ours = "!f() { git co --ours $@ && git add $@; }; f"
  # Checkout commits from the repo that need merging with mine
  theirs = "!f() { git co --theirs $@ && git add $@; }; f"

  # Basic shortcuts
  cp = cherry-pick
  s = status -s
  st = status
  c = clone --recursive
  cl = clone
  # Saves some typing like the old 'svn ci'
  commit = ci
  # Saves some typing like the old 'svn co'
  co = checkout
  br = branch
  diff = diff --word-diff
  dc = diff --cached

  # Reset Commands
  # Reset progressively further back and harder
  # r = reset
  # HEAD -1
  r1 = reset HEAD^
  # HEAD -2
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard

  # Stash Operations
  sl = stash list
  sa = stash apply
  ss = stash save
[user]
	name = Steve Martin
	email = smartin5590+github@gmail.com
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
