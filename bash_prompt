#!/bin/bash
# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

# Only run this once
[[ -z "${CYG_HOME_PROMPT}" ]] && CYG_HOME_PROMPT="1" || return 0
# echo ".bash_prompt"

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
  export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
  export TERM='xterm-256color';
fi;

IDCMD=$(which id)

prompt_git() {
  local s=''
  local branchName=''

  if [ -d ./.git ];then
    # Get the short symbolic ref.
    # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
    # Otherwise, just give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \ git rev-parse --short HEAD 2> /dev/null || \
      echo '(unknown)')"
    gitsize=$(du -s ./.git | awk '{print $1}' 2> /dev/null)

    if [ $gitsize -lt 8000000 ];then
      # Check if the current directory is in a Git repository.
      if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then
          # Ensure the index is up to date.
          git update-index --really-refresh -q &>/dev/null

          # Check for uncommitted changes in the index.
          if ! $(git diff --quiet --ignore-submodules --cached); then
            s+='+'
          fi

          # Check for unstaged changes.
          if ! $(git diff-files --quiet --ignore-submodules --); then
            s+='!'
          fi

          # Check for untracked files.
          if [ -n "$(git ls-files --others --exclude-standard)" ]; then
            s+='?'
          fi

          # Check for stashed files.
          if $(git rev-parse --verify refs/stash &>/dev/null); then
            s+='$'
          fi
        fi
      fi

      [ -n "${s}" ] && s=" [${s}]"

      echo -e "${1}${branchName}${blue}${s}"
    else
      # Check for uncommitted changes in the index.
      if ! $(git diff --quiet --ignore-submodules --cached); then
        s+='+'
      fi

      # Check for unstaged changes.
      #if ! $(git diff-files --quiet --ignore-submodules --); then
      #  s+='!'
      #fi

      # Check for untracked files.
      if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        s+='?'
      fi

      # Check for stashed files.
      if $(git rev-parse --verify refs/stash &>/dev/null); then
        s+='$'
      fi
      [ -n "${s}" ] && s=" [${s}]"

      echo -e "${1}${branchName}${blue}${s}"
      return
    fi
  fi
}

if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);
  # Solarized colors, taken from http://git.io/solarized-colors.
  black=$(tput setaf 0);
  blue=$(tput setaf 33);
  cyan=$(tput setaf 37);
  green=$(tput setaf 64);
  orange=$(tput setaf 166);
  purple=$(tput setaf 125);
  red=$(tput setaf 124);
  violet=$(tput setaf 61);
  white=$(tput setaf 15);
  yellow=$(tput setaf 136);
else
  bold='';
  reset="\e[0m";
  black="\e[1;30m";
  blue="\e[1;34m";
  cyan="\e[1;36m";
  green="\e[1;32m";
  orange="\e[1;33m";
  purple="\e[1;35m";
  red="\e[1;31m";
  violet="\e[1;35m";
  white="\e[1;37m";
  yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="${red}";
  userName="root";
else
  userStyle="${green}";
  userName="${USER}";
  ${IDCMD} -Gn | /bin/grep -i admin > /dev/null 2>&1
  declare -i RETVAL="$?"
  if [ "$RETVAL" -eq 0 ];then
    # Give me a Big Red Admin tag so we know we're running with
    # elevated permissions.
    userStyle="${red}";
    userName='Admin';
  fi
  unset RETVAL
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${orange}";
else
  hostStyle="${green}";
fi;

# Set the terminal title to the current working directory.
PS1="\[\033]0;\w\007\]";
PS1+="\[${bold}\]\n"; # newline
PS1+='$(r=$?; test $r -ne 0 && printf "\[\e[1;31m\][ret:$r] ")'
PS1+="\[${userStyle}\]${userName}"; # username
PS1+="\[${white}\]@";
PS1+="\[${hostStyle}\]\h"; # host
PS1+="\[${white}\] in ";
PS1+="\[${green}\]\w"; # working directory
PS1+="\$(prompt_git \"${white} on ${violet}\")"; # Git repository details
PS1+="\n";
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
export PS1;
#echo "PS1 $PS1"

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
