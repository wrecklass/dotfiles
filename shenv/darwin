#!/bin/bash

#export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home"
export JAVA_HOME="/Library/Java/JavaVirtualMachines/jdk1.8.0_05.jdk/Contents/Home"
export GROOVY_HOME="/usr/local/opt/groovy/libexec"
#export ANT_HOME="/usr/local/opt/ant/libexec"
export ANT_HOME="/usr/local/apache-ant-1.9.4"
export MYSQL_HOME="/usr/local/mysql"
# export GOROOT="/usr/local/go"
export GOROOT="/Users/smartin/src/github/go-darwin-amd64-bootstrap"
#export GOROOT="/Users/smartin/src/github/golang"
export GOPATH="/Users/smartin/src/gocode"

export HISTSIZE=5000
export HISTFILESIZE=${HISTSIZE}
export HISTCONTROL='erasedups:ignoreboth'
export HISTTIMEFORMAT="%m/%d/%y %T "
export HISTIGNORE="&:[ ]*:exit"

export s3bucket="s3://com.charter.aesd.engprod.sshsec"

export MANPAGER="less -X"

# Prefer English UTF-8
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# Make all of the OS X apps from $HOME/Applications, 
# /Applications and /Applications/Utilties into command
# line aliases to open them easily.
#
# e.g. BBEdit.app gets an alias of:
#   alias bbedit='open -a BBEdit.app'
function foomagick() {
  rm -f ~/.foomagick.tmp
  /bin/ls /Applications /Applications/Utilities /Users/smartin/Applications | /usr/bin/grep "\.app" | /usr/bin/grep -v iWork |\
  while read APP
  do
    [[ "$APP" == "Docker.app" ]] && continue
    # Clean it up
    a=$(echo $APP | sed "s/\ //g" )
    a=$(echo $a | sed -e "s/\'//g" )
    a=$(echo $a | tr "[:upper:]" "[:lower:]")
    echo alias ${a%.*}="'open -a \"${APP%.*}\"'" >> ~/.foomagick.tmp
  done
  echo alias word="'open -a Microsoft\ Word.app'" >> ~/.foomagick.tmp
  echo alias excel="'open -a Microsoft\ Excel.app'" >> ~/.foomagick.tmp
  echo alias chrome="'open -a Google\ Chrome.app'" >> ~/.foomagick.tmp
  echo alias code="'/Users/smartin/Applications/Visual\ Studio\ Code.app/Contents/MacOS/Electron'" >> ~/.foomagick.tmp
  source ~/.foomagick.tmp
  # rm -f ~/.foomagick.tmp
}

foomagick

# Trying for a "best of both worlds" approach to locate
# on OS X darwin. Use the faster mdfind. However, this fails
# for partial pathnames like: bin/sudo. So fall back to mlocate
# style for those cases.
function _locate() {
  declare -i nmbr=$(mdfind -name "$*" -count)

  if [ $nmbr -gt 0 ];then
    # echo "mdfind -name $*"
    mdfind -name "$*"
  else
    /usr/bin/locate $*
  fi
}

alias locate="_locate"
alias start='open'

pathmunge() {
  # If the new directory is already in our PATH skip it
  if [ $# -eq 0 ];then
    echo $PATH | awk 'BEGIN { RS=":" } ; { print $1 }'
  else
    case "$:${PATH}:" in
      *:"$1":*)
        ;;
      *)
        if [ "$2" == "after" ];then
          PATH="$PATH:$1"
        else
          PATH="$1:$PATH"
        fi
    esac
  fi
}

# Inserted before current path
# So last one ends up being first on PATH
for var in "$JAVA_HOME" "$ANT_HOME" "$HOME" "$GOROOT"
do
  if [ -d "${var}/bin" -a -r "${var}/bin" ];then
    pathmunge "${var}/bin"
  fi
done

# Add these after the rest of the PATH
for var in "$GROOVY_HOME" "$MYSQL_HOME" "$GOPATH"
do
  if [ -d "${var}/bin" -a -r "${var}/bin" ];then
    pathmunge "${var}/bin" after
  fi
done

# Need to do this before sourcing .bash_aliases
HAVE_VIM=$(command -v vim)
#echo $HAVE_VIM

EDITOR=vi
if [ -n "$HAVE_VIM" ];then
  EDITOR="$HAVE_VIM"
fi
export EDITOR

# unset pathmunge
unset foomagick

if [ -f /usr/local/etc/bash_completion ]; then
  source /usr/local/etc/bash_completion
fi

